let subhead=document.getElementsByClassName("chart-subhead"),headline=document.getElementById("chart-head");if(!headline)for(var i=0;i<subhead.length;i++)subhead[i].style.fontWeight="600";Highcharts.setOptions({lang:{thousandsSep:","}});let chartIdBMHistory=document.getElementById("chart-container-bear-market-history");function drawHighcharts(){Highcharts.chart(chartIdBMHistory,{chart:{type:"variwide",styledMode:!0,spacingBottom:25,spacingRight:100,marginLeft:40},title:{text:null},series:[{data:[["May 1946 – October '46",26.6,4.4],["June 1948 – June '49",20.6,12.1],["July 1957 – Oct. '57",20.7,3.3],["Dec. 1961 – June '62",28,6.5],["Feb. 1966 – Oct. '66",22.2,8],["Nov. 1968 – May '70",36.1,18.1],["Jan. 1973 – Oct. '74",48.2,21],["Nov. 1980 – Aug. '82",27.1,20.7],["Aug. 1987 – Dec. '87",33.5,3.4],["March 2000 – Oct. '02",49.1,31],["Oct. 2007 – March '09",56.8,17.2]]}],plotOptions:{series:{dataLabels:{enabled:!0,format:"{point.z:,.0f}",allowOverlap:!0,verticalAlign:"top",align:"center"}}},legend:{enabled:!1},xAxis:{title:{text:"Duration of bear market, in months",align:"low"},type:"category",labels:{enabled:!1,overflow:"allow",padding:20,style:{whiteSpace:"wrap"}}},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,pointFormat:"<b>Percent loss:</b> {point.y:.1f}%<br><b>Duration:</b> {point.z} months<br>"},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}})}setTimeout(function(){if(""===chartIdBMHistory.innerHTML){let e=document.getElementsByClassName("chart-area-bear-market-history");for(var t=0;t<e.length;t++)e[t].style.display="none";document.getElementById("chart-fallback").innerHTML+='<img src="https://fm-static.cnbc.com/awsmedia/chart/2019/10/08/chart-error_wide.1570569331252.png" style="width: 100%;max-width:660px">'}},500),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
